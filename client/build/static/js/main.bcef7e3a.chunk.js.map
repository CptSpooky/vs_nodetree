{"version":3,"sources":["components/tree-Chart/tree-chart.component.jsx","components/interface/interface.component.jsx","components/form-input/form-input-edit.component.jsx","App.js","index.js"],"names":["useStyles","makeStyles","root","height","flexGrow","maxWidth","generateNums","factory","nums","i","qty","push","Math","floor","random","max","min","TreeChart","data","selectedId","selected","classes","TreeView","className","defaultCollapseIcon","defaultExpandIcon","map","val","key","TreeItem","nodeId","id","label","name","onClick","theme","button","margin","spacing","Interface","addFactory","deleteFactory","Button","variant","color","startIcon","size","FormInputAdd","onChangeSetName","onChangeSetQty","onChangeSetMin","onChangeSetMax","updateFactory","type","value","onChange","e","target","App","useState","setName","setQty","setMin","setMax","currentId","setCurrentId","factoryList","setFactoryList","useEffect","rebuildFactoryList","Axios","get","then","response","applyCurrentId","length","findFactory","console","log","newName","post","newId","delete","put","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wXAOMA,EAAYC,YAAW,CAC3BC,KAAM,CACJC,OAAQ,OACRC,SAAU,EACVC,SAAU,OAIRC,EAAe,SAACC,GAElB,IADA,IAAIC,EAAO,GACHC,EAAI,EAAGA,EAAIF,EAAQG,IAAKD,IAC5BD,EAAKG,KAAKC,KAAKC,MAAMD,KAAKE,UAAYP,EAAQQ,IAAMR,EAAQS,MAAQT,EAAQS,KAEhF,OAAOR,GA8BIS,EA3BG,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,SAC9BC,EAAUrB,IAChB,MAAoB,qBAATkB,EAA+B,wBAGxC,cAACI,EAAA,EAAD,CACEC,UAAWF,EAAQnB,KACnBsB,oBAAqB,cAAC,IAAD,IACrBC,kBAAmB,cAAC,IAAD,IACnBL,SAAUA,EAJZ,SAMCF,EAAKQ,KAAI,SAACC,EAAKC,GACd,OACE,cAACC,EAAA,EAAD,CAAoBC,OAAQ,GAAKH,EAAII,GAAIC,MAAOL,EAAIM,KAAMC,QAAS,kBAAKf,EAAWQ,EAAII,KAAvF,SACKzB,EAAaqB,GAAKD,KAAI,SAACC,EAAKC,GACzB,OACI,cAACC,EAAA,EAAD,CAAoBC,OAAaH,EAAII,GAAT,KAAuBC,MAAO,OAASL,GAApDC,OAHZA,S,yDC3BjB5B,EAAYC,aAAW,SAACkC,GAAD,MAAY,CACrCC,OAAQ,CACNC,OAAQF,EAAMG,QAAQ,QAoCbC,EAhCG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cACzBpB,EAAUrB,IAEhB,OACE,sBAAKuB,UAAU,iBAAf,UAEE,cAACmB,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNrB,UAAWF,EAAQe,OACnBS,UAAW,cAAC,IAAD,IACXX,QAASM,EACTM,KAAK,QANP,iBAWA,cAACJ,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,YACNrB,UAAWF,EAAQe,OACnBS,UAAW,cAAC,IAAD,IACXX,QAASO,EACTK,KAAK,QANP,wB,kCCxBA9C,EAAYC,aAAW,SAACkC,GAAD,MAAY,CACvCC,OAAQ,CACNC,OAAQF,EAAMG,QAAQ,QA6DXS,EAxDM,SAAC,GAA6G,IAA3GC,EAA0G,EAA1GA,gBAAiBC,EAAyF,EAAzFA,eAAgBC,EAAyE,EAAzEA,eAAgBC,EAAyD,EAAzDA,eAAgBC,EAAyC,EAAzCA,cAAenB,EAA0B,EAA1BA,KAAMvB,EAAoB,EAApBA,IAAKM,EAAe,EAAfA,IAAKD,EAAU,EAAVA,IAChHM,EAAUrB,IAEhB,OACI,sBAAK+B,GAAG,YAAYR,UAAU,QAA9B,UACE,kDACA,0GAEA,sBAAKA,UAAU,aAAf,UACI,0CACA,uBACA8B,KAAK,OACLC,MAAOrB,EACPsB,SAAU,SAACC,GAAD,OAAOR,EAAgBQ,EAAEC,OAAOH,UAE1C,yCACA,uBAAOD,KAAK,SACZC,MAAO5C,EACP6C,SAAU,SAACC,GAAD,OAAOP,EAAeO,EAAEC,OAAOH,UAEzC,yCACA,uBAAOD,KAAK,SACZC,MAAOtC,EACPuC,SAAU,SAACC,GAAD,OAAON,EAAeM,EAAEC,OAAOH,UAEzC,yCACA,uBAAOD,KAAK,SACZC,MAAOvC,EACPwC,SAAU,SAACC,GAAD,OAAOL,EAAeK,EAAEC,OAAOH,aAG7C,sBAAK/B,UAAU,0BAAf,UACE,cAACmB,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNE,KAAK,QACLvB,UAAWF,EAAQe,OACnBS,UAAW,cAAC,IAAD,IACXX,QAASkB,EANX,kBAUA,cAACV,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNE,KAAK,QACLvB,UAAWF,EAAQe,OACnBS,UAAW,cAAC,IAAD,IALb,+B,MC0EKa,MAzHf,WAGE,MAAwBC,mBAAS,IAAjC,mBAAO1B,EAAP,KAAa2B,EAAb,KACA,EAAsBD,mBAAS,GAA/B,mBAAOjD,EAAP,KAAYmD,EAAZ,KACA,EAAsBF,mBAAS,GAA/B,mBAAO3C,EAAP,KAAY8C,EAAZ,KACA,EAAsBH,mBAAS,GAA/B,mBAAO5C,EAAP,KAAYgD,EAAZ,KAEA,EAAkCJ,mBAAS,IAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KAGA,EAAsCN,mBAAS,IAA/C,mBAAOO,EAAP,KAAoBC,EAApB,KAGAC,qBAAU,WACRC,MACC,IAGH,IAAMA,EAAqB,WACzBC,IAAMC,IAAI,qDAAqDC,MAAK,SAACC,GACnEN,EAAeM,EAASvD,UA4DtBwD,EAAiB,SAAC3C,GACtBkC,EAAalC,GACb,IAAMxB,EAZY,SAACwB,GACnB,IAAI,IAAItB,EAAI,EAAGA,EAAIyD,EAAYS,OAAQlE,IACnC,GAAGyD,EAAYzD,GAAGsB,KAAOA,EACrB,OAAOmC,EAAYzD,GAG3B,OAAO,KAMSmE,CAAY7C,GAC5B6B,EAAQrD,EAAQ0B,MAChB4B,EAAOtD,EAAQG,KACfoD,EAAOvD,EAAQS,KACf+C,EAAOxD,EAAQQ,MAGjB,OACI,sBAAKQ,UAAU,YAAf,UACE,sBAAKA,UAAW,oBAAhB,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAWL,KAAQgD,EACjB/C,WAAc,SAAAmC,GAAUoB,EAAepB,IACvClC,SAAY,GAAK4C,MAGrB,cAAC,EAAD,CACIxB,WA1EO,WACjBqC,QAAQC,IAAId,GACZ,IAAMe,EAAU,cAMhBnB,EAAQmB,GACRlB,EANe,GAOfC,EANe,GAOfC,EANe,KAQfO,IAAMU,KAAK,iDAAkD,CAC3D/C,KAAM8C,EACNrE,IAZa,EAabM,IAZa,EAabD,IAZa,MAaZyD,MAAK,SAACC,GACP,IAAMQ,EAAQR,EAASvD,KACvB+C,EAAagB,GACbZ,QAsDQ5B,cAjDU,WACpB6B,IAAMY,OAAN,4DAAkElB,IAClEK,UAkDI,cAAC,EAAD,CACErB,gBAAmB,SAAAM,GAAK,OAAIM,EAAQN,IACpCL,eAAkB,SAAAK,GAAK,OAAIO,EAAOP,IAClCJ,eAAkB,SAAAI,GAAK,OAAIQ,EAAOR,IAClCH,eAAkB,SAAAG,GAAK,OAAIS,EAAOT,IAClCF,cAnDc,WACpBkB,IAAMa,IAAN,4DAA+DnB,GAC/D,CACE/B,KAAMA,EACNvB,IAAKA,EACLM,IAAKA,EACLD,IAAKA,IACJyD,MAAK,WACNH,QA4CIL,UAAaA,EACbE,YAAeA,EACfjC,KAAQA,EACRvB,IAAOA,EACPM,IAAOA,EACPD,IAAOA,QCzHjBqE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.bcef7e3a.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TreeView from '@material-ui/lab/TreeView';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport TreeItem from '@material-ui/lab/TreeItem';\n\nconst useStyles = makeStyles({\n  root: {\n    height: \"auto\",\n    flexGrow: 1,\n    maxWidth: 300,\n  },\n});\n\nconst generateNums = (factory) => {\n    var nums = [];\n    for(let i = 0; i < factory.qty; i++){\n        nums.push(Math.floor(Math.random() * (factory.max - factory.min)) + factory.min);\n    }\n    return nums;\n}\n\nconst TreeChart = ({data, selectedId, selected}) => {\n  const classes = useStyles();\n  if (typeof data === 'undefined') {return (<div></div>)}\n\n  return(\n    <TreeView\n      className={classes.root}\n      defaultCollapseIcon={<ExpandMoreIcon />}\n      defaultExpandIcon={<ChevronRightIcon />}\n      selected={selected}\n    >\n    {data.map((val, key) => {\n      return (\n        <TreeItem key={key} nodeId={\"\" + val.id} label={val.name} onClick={()=> selectedId(val.id)}>\n            {generateNums(val).map((val, key) => {\n                return(\n                    <TreeItem key={key} nodeId={\"\" + val.id + \"-\" + 1} label={\"val \" + val}></TreeItem>\n                );\n            })}\n        </TreeItem>\n      );\n      })\n    }\n    </TreeView>\n  );\n}\n\nexport default TreeChart;","import React from 'react';\nimport './interface.styles.scss';\nimport '../form-input/form-input.styles.scss';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddIcon from '@material-ui/icons/AddCircleOutlineRounded';\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n      margin: theme.spacing(1),\n    },\n}));\n\nconst Interface = ({ addFactory, deleteFactory }) => {\n  const classes = useStyles();\n\n  return(\n    <div className=\"interface-card\">\n\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.button}\n        startIcon={<AddIcon />}\n        onClick={addFactory}\n        size=\"small\"\n      >\n        Add\n      </Button>\n      \n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        className={classes.button}\n        startIcon={<DeleteIcon />}\n        onClick={deleteFactory}\n        size=\"small\"\n      >\n        Delete\n      </Button>\n     \n    </div>\n  );\n}\n\nexport default Interface;","import React from 'react';\nimport './form-input.styles.scss';\nimport { makeStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport RefreshIcon from '@material-ui/icons/RefreshRounded';\nimport SaveIcon from '@material-ui/icons/Save';\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    margin: theme.spacing(1),\n  },\n}));\n\n\nconst FormInputAdd = ({ onChangeSetName, onChangeSetQty, onChangeSetMin, onChangeSetMax, updateFactory, name, qty, min, max }) => {\n  const classes = useStyles();\n\n  return(\n      <div id=\"popupedit\" className=\"popup\">\n        <h2>Factory Settings</h2>\n        <p>To edit a factory, select it from the tree and update its settings below.</p>\n        \n        <div className=\"form-input\">\n            <label>Name:</label>\n            <input \n            type=\"text\" \n            value={name}\n            onChange={(e) => onChangeSetName(e.target.value)}\n            />\n            <label>Qty:</label>\n            <input type=\"number\"\n            value={qty}\n            onChange={(e) => onChangeSetQty(e.target.value)}\n            />\n            <label>Min:</label>\n            <input type=\"number\"\n            value={min}\n            onChange={(e) => onChangeSetMin(e.target.value)}\n            />\n            <label>Max:</label>\n            <input type=\"number\"\n            value={max}\n            onChange={(e) => onChangeSetMax(e.target.value)}\n            />\n        </div>\n        <div className=\"factory-setting-buttons\">\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"small\"\n            className={classes.button}\n            startIcon={<SaveIcon />}\n            onClick={updateFactory}\n          >\n            Save\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"small\"\n            className={classes.button}\n            startIcon={<RefreshIcon />}\n          >\n            Regenerate\n          </Button>\n        </div>\n      </div>\n  );\n}\n\nexport default FormInputAdd;","import React, { useState, useEffect } from 'react';\nimport \"./App.css\";\nimport Axios from 'axios';\nimport TreeChart from './components/tree-Chart/tree-chart.component';\nimport Interface from './components/interface/interface.component';\nimport FormInputEdit from './components/form-input/form-input-edit.component';\nimport './app.styles.scss';\n//import { inspect } from 'util';\n//const util = require('util');\n\nfunction App() {\n\n  /* States */\n  const [name, setName] = useState(\"\");\n  const [qty, setQty] = useState(0);\n  const [min, setMin] = useState(0);\n  const [max, setMax] = useState(0);\n\n  const [currentId, setCurrentId] = useState(\"\");\n\n  /* Factory object */\n  const [factoryList, setFactoryList] = useState([]);\n\n  /* Get factories on initial load */\n  useEffect(() => {\n    rebuildFactoryList();\n  }, []);\n\n  /* Rebuild factory list */\n  const rebuildFactoryList = () => {\n    Axios.get('https://pure-forest-64023.herokuapp.com/factories').then((response) => { \n      setFactoryList(response.data);\n    });\n  }\n\n  /* Add Factory */\n  const addFactory = () => {\n    console.log(currentId);\n    const newName = \"New Factory\";\n    const newQty = 6;\n    const newMin = 0;\n    const newMax = 100;\n\n    /* Set default for new factory */\n    setName(newName);\n    setQty(newQty);\n    setMin(newMin);\n    setMax(newMax);\n\n    Axios.post('https://pure-forest-64023.herokuapp.com/create', {\n      name: newName, \n      qty: newQty, \n      min: newMin, \n      max: newMax\n    }).then((response) => { \n      const newId = response.data;\n      setCurrentId(newId);\n      rebuildFactoryList();\n    });\n  }\n\n  /* Delete factory */\n  const deleteFactory = () => {\n    Axios.delete(`https://pure-forest-64023.herokuapp.com/factories/${currentId}`);\n    rebuildFactoryList();\n  }\n\n  /* Update factory */\n  const updateFactory = () => {\n    Axios.put(`https://pure-forest-64023.herokuapp.com/factories/${currentId}`, \n    {\n      name: name, \n      qty: qty, \n      min: min, \n      max: max\n    }).then(() => { \n      rebuildFactoryList();\n    });\n  }\n\n  /* Find selected factory */\n  const findFactory = (id) => {\n    for(let i = 0; i < factoryList.length; i++){\n        if(factoryList[i].id === id){\n            return factoryList[i];\n        }\n    }\n    return null;\n  }\n\n  /* Updates factory state settings to form */\n  const applyCurrentId = (id) => {\n    setCurrentId(id);\n    const factory = findFactory(id);\n    setName(factory.name);\n    setQty(factory.qty);\n    setMin(factory.min);\n    setMax(factory.max);\n  }\n\n  return (\n      <div className=\"container\">\n        <div className =\"factory-interface\">\n          <div className=\"factory-list\">\n            <TreeChart data = {factoryList} \n              selectedId = {value => {applyCurrentId(value)}} \n              selected = {\"\" + currentId}       \n            />\n          </div>\n          <Interface \n              addFactory = {addFactory}\n              deleteFactory = {deleteFactory}\n          />\n        </div>  \n        <FormInputEdit \n          onChangeSetName = {value => setName(value)}\n          onChangeSetQty = {value => setQty(value)}\n          onChangeSetMin = {value => setMin(value)}\n          onChangeSetMax = {value => setMax(value)}\n          updateFactory = {updateFactory}\n          currentId = {currentId}\n          factoryList = {factoryList}\n          name = {name}\n          qty = {qty}\n          min = {min}\n          max = {max}\n        />\n      </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}