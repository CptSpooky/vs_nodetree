{"version":3,"sources":["components/tree-Chart/tree-chart.component.jsx","components/interface/interface.component.jsx","components/form-input/form-input-edit.component.jsx","App.js","index.js"],"names":["seedrandom","require","useStyles","makeStyles","root","height","flexGrow","maxWidth","randBetween","rng","min","max","Math","floor","generateNums","factory","gentime","nums","i","qty","push","TreeChart","data","selectedId","selected","classes","TreeView","className","defaultCollapseIcon","defaultExpandIcon","TreeItem","label","nodeId","map","val","key","icon","id","name","onClick","theme","button","margin","spacing","Interface","addFactory","deleteFactory","onRegenFactorySeed","Button","variant","color","startIcon","size","disabled","FormInputAdd","onChangeSetName","onChangeSetQty","onChangeSetMin","onChangeSetMax","updateFactory","qtyValid","nameValid","length","minValid","maxValid","allValid","type","maxLength","value","onChange","e","target","App","useState","setName","setQty","setMin","setMax","currentId","setCurrentId","factoryList","setFactoryList","useEffect","rebuildFactoryList","Axios","get","then","response","applyCurrentId","findFactory","console","log","newName","post","newId","delete","put","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f3172d3.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TreeView from '@material-ui/lab/TreeView';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport TreeItem from '@material-ui/lab/TreeItem';\nimport Dice from '@material-ui/icons/CasinoRounded';\nconst seedrandom = require('seedrandom');\n\nconst useStyles = makeStyles({\n  root: {\n    height: \"auto\",\n    flexGrow: 1,\n    maxWidth: 300,\n  },\n});\n\n/* Generate an integer between min (inclusive) and max (inclusive) */\nconst randBetween = (rng, min, max) => {\n    return Math.floor(rng() * (max - min + 1)) + min;\n}\n\n/* Generate random nums */\nconst generateNums = (factory) => {\n    /* Random number generator seed */\n    let rng = seedrandom(factory.gentime);\n\n    var nums = [];\n    for(let i = 0; i < factory.qty; i++){\n        nums.push(randBetween(rng, factory.min, factory.max));\n    }\n    return nums;\n}\n\nconst TreeChart = ({data, selectedId, selected}) => {\n  const classes = useStyles();\n  if (typeof data === 'undefined') {return (<div></div>)}\n\n  return(\n    <TreeView\n      className={classes.root}\n      defaultCollapseIcon={<ExpandMoreIcon />}\n      defaultExpandIcon={<ChevronRightIcon />}\n      selected={selected}\n    >\n        <TreeItem label=\"Main\" nodeId=\"main\">\n            {data.map((val, key) => {\n            return (\n                <TreeItem key={key} icon={<Dice />} nodeId={\"\" + val.id} label={val.name} onClick={()=> selectedId(val.id)}>\n                    {generateNums(val).map((val, key) => {\n                        return(\n                            <TreeItem key={key} nodeId={\"\" + val.id + \"-\" + 1} label={\"\" + val}></TreeItem>\n                        );\n                    })}\n                </TreeItem>\n            );\n            })\n            }\n        </TreeItem>\n    </TreeView>\n  );\n}\n\nexport default TreeChart;","import React from 'react';\nimport './interface.styles.scss';\nimport '../form-input/form-input.styles.scss';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddIcon from '@material-ui/icons/AddCircleOutlineRounded';\nimport RefreshIcon from '@material-ui/icons/RefreshRounded';\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n      margin: theme.spacing(1),\n    },\n}));\n\nconst Interface = ({ addFactory, deleteFactory, onRegenFactorySeed, selectedId }) => {\n  const classes = useStyles();\n\n  return(\n    <div className=\"interface-card\">\n\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.button}\n        startIcon={<AddIcon />}\n        onClick={addFactory}\n        size=\"small\"\n      >\n        Add\n      </Button>\n      \n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        className={classes.button}\n        disabled={selectedId == \"\" ? true : false}\n        startIcon={<DeleteIcon />}\n        onClick={deleteFactory}\n        size=\"small\"\n      >\n        Delete\n      </Button>\n\n      <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"small\"\n            className={classes.button}\n            disabled={selectedId == \"\" ? true : false}\n            startIcon={<RefreshIcon />}\n            onClick={onRegenFactorySeed}\n          >\n            Regenerate\n        </Button>\n     \n    </div>\n  );\n}\n\nexport default Interface;","import React from 'react';\nimport './form-input.styles.scss';\nimport { makeStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport SaveIcon from '@material-ui/icons/Save';\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    margin: theme.spacing(1),\n  },\n}));\n\n\nconst FormInputAdd = ({ onChangeSetName, onChangeSetQty, onChangeSetMin, onChangeSetMax, updateFactory, name, qty, min, max, selectedId }) => {\n  const classes = useStyles();\n  if(selectedId == \"\"){\n    return (\n      <div id=\"popupedit\" className=\"popup\">\n      <p>To edit a factory, select it from the tree.</p>\n      </div>\n    );\n  }\n\n  /* Validation conditions */\n  let qtyValid = qty > 0 && qty <= 15;\n  let nameValid = name.length >= 1 && name.length <= 30;\n  let minValid = min > -100000000 && min < 100000000 && min !== \"\";\n  let maxValid = min > -100000000 && max < 100000000 && min < max && max !== \"\";\n  let allValid = qtyValid && nameValid && minValid && maxValid;\n\n  return(\n      <div id=\"popupedit\" className=\"popup\">\n        <h2>Factory Settings</h2>\n        <p>To edit a factory, select it from the tree and update its settings below.</p>\n        \n        <div className=\"form-input\">\n            <div className=\"label-cage\">\n              <label>Name</label>\n              {nameValid ? \"\" : <div className=\"errMsg\">invalid name</div>}\n            </div>\n            <input \n            type=\"text\" \n            maxLength=\"30\"\n            value={name}\n            className={nameValid ? \"\" : \"err\" }\n            onChange={(e) => onChangeSetName(e.target.value)}\n            />\n            <div className=\"label-cage\">\n              <label>Qty</label>\n              {qtyValid ? \"\" : <div className=\"errMsg\">value out of range</div>}\n            </div>\n            <input type=\"number\"\n            min=\"1\"\n            max=\"15\"\n            value={qty}\n            className={qtyValid ? \"\" : \"err\" }\n            onChange={(e) => onChangeSetQty(e.target.value)}\n            />\n            <div className=\"label-cage\">\n              <label>Min</label>\n              {minValid ? \"\" : <div className=\"errMsg\">value out of range</div>}\n            </div>\n            <input type=\"number\"\n            min=\"-100000000\"\n            max=\"100000000\"\n            className={minValid ? \"\" : \"err\" }\n            value={min}\n            onChange={(e) => onChangeSetMin(e.target.value)}\n            />\n            <div className=\"label-cage\">\n              <label>Max</label>\n              {maxValid ? \"\" : <div className=\"errMsg\">value out of range</div>}\n            </div>\n            <input type=\"number\"\n              min=\"-100000000\"\n              max=\"100000000\"\n              className={maxValid ? \"\" : \"err\" }\n              value={max}\n              onChange={(e) => onChangeSetMax(e.target.value)}\n            />\n        </div>\n        <div className=\"factory-setting-buttons\">\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"small\"\n            disabled={allValid ? false : true}\n            className={classes.button}\n            startIcon={<SaveIcon />}\n            onClick={updateFactory}\n          >\n            Save\n          </Button>\n          \n        </div>\n      </div>\n  );\n}\n\nexport default FormInputAdd;","import React, { useState, useEffect } from 'react';\nimport \"./App.css\";\nimport Axios from 'axios';\nimport TreeChart from './components/tree-Chart/tree-chart.component';\nimport Interface from './components/interface/interface.component';\nimport FormInputEdit from './components/form-input/form-input-edit.component';\nimport './app.styles.scss';\n//import { inspect } from 'util';\n//const util = require('util');\n\nfunction App() {\n\n  /* States */\n  const [name, setName] = useState(\"\");\n  const [qty, setQty] = useState(0);\n  const [min, setMin] = useState(0);\n  const [max, setMax] = useState(0);\n\n  const [currentId, setCurrentId] = useState(\"\");\n\n  /* Factory object */\n  const [factoryList, setFactoryList] = useState([]);\n\n  /* Get factories on initial load */\n  useEffect(() => {\n    rebuildFactoryList();\n  }, []);\n\n  /* Rebuild factory list */\n  const rebuildFactoryList = () => {\n    Axios.get('https://pure-forest-64023.herokuapp.com/factories').then((response) => { \n      setFactoryList(response.data);\n    });\n  }\n\n  /* Add Factory */\n  const addFactory = () => {\n    console.log(currentId);\n    const newName = \"New Factory\";\n    const newQty = 6;\n    const newMin = 0;\n    const newMax = 100;\n\n    /* Set default for new factory */\n    setName(newName);\n    setQty(newQty);\n    setMin(newMin);\n    setMax(newMax);\n\n    Axios.post('https://pure-forest-64023.herokuapp.com/create', {\n      name: newName, \n      qty: newQty, \n      min: newMin, \n      max: newMax\n    }).then((response) => { \n      const newId = response.data;\n      setCurrentId(newId);\n      rebuildFactoryList();\n    });\n  }\n\n  /* Delete factory */\n  const deleteFactory = () => {\n    Axios.delete(`https://pure-forest-64023.herokuapp.com/factories/${currentId}`);\n    setCurrentId(\"\");\n    rebuildFactoryList();\n  }\n\n  /* Update factory */\n  const updateFactory = () => {\n    let newName = name;\n    if (newName == \"\") {\n      newName = \"Nameless Factory\"\n    }\n\n    Axios.put(`https://pure-forest-64023.herokuapp.com/factories/${currentId}`, \n    {\n      name: newName, \n      qty: qty, \n      min: min, \n      max: max\n    }).then(() => { \n      rebuildFactoryList();\n    });\n  }\n\n  /* Regen seed */\n  const regenFactorySeed = () => {\n    Axios.put(`https://pure-forest-64023.herokuapp.com/factories/regen/${currentId}`, {})\n    .then(() => { \n      rebuildFactoryList();\n    });\n  }\n\n  /* Find selected factory */\n  const findFactory = (id) => {\n    for(let i = 0; i < factoryList.length; i++){\n        if(factoryList[i].id === id){\n            return factoryList[i];\n        }\n    }\n    return null;\n  }\n\n  /* Updates factory state settings to form */\n  const applyCurrentId = (id) => {\n    setCurrentId(id);\n    const factory = findFactory(id);\n    setName(factory.name);\n    setQty(factory.qty);\n    setMin(factory.min);\n    setMax(factory.max);\n  }\n\n  return (\n      <div className=\"container\">\n        <div className =\"factory-interface\">\n          <div className=\"factory-list\">\n            <TreeChart data = {factoryList} \n              selectedId = {value => {applyCurrentId(value)}} \n              selected = {\"\" + currentId}    \n            />\n          </div>\n          <Interface \n              addFactory = {addFactory}\n              deleteFactory = {deleteFactory}\n              onRegenFactorySeed = {regenFactorySeed}\n              selectedId = {currentId}\n          />\n        </div>  \n        <FormInputEdit \n          onChangeSetName = {value => setName(value)}\n          onChangeSetQty = {value => setQty(value)}\n          onChangeSetMin = {value => setMin(value)}\n          onChangeSetMax = {value => setMax(value)}\n          updateFactory = {updateFactory}\n          currentId = {currentId}\n          factoryList = {factoryList}\n          name = {name}\n          qty = {qty}\n          min = {min}\n          max = {max}\n          selectedId = {currentId}\n        />\n      </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}