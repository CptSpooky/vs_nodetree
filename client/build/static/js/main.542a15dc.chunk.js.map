{"version":3,"sources":["components/tree-Chart/tree-chart.component.jsx","components/interface/interface.component.jsx","components/form-input/form-input-edit.component.jsx","App.js","index.js"],"names":["seedrandom","require","useStyles","makeStyles","root","height","flexGrow","margin","color","iconStyles","marginRight","randBetween","rng","min","max","Math","floor","generateNums","factory","gentime","nums","i","qty","push","TreeChart","data","selectedId","selected","classes","iconClasses","TreeView","defaultCollapseIcon","defaultExpandIcon","TreeItem","label","className","nodeId","map","val","key","id","name","onClick","theme","button","spacing","Interface","addFactory","deleteFactory","onRegenFactorySeed","Button","variant","startIcon","size","disabled","check","arrow","fontSize","FormInputAdd","onChangeSetName","onChangeSetQty","onChangeSetMin","onChangeSetMax","updateFactory","useState","saveClicked","setSaveClicked","qtyValid","nameValid","length","minValid","maxValid","allValid","type","maxLength","value","onChange","e","target","setTimeout","App","setName","setQty","setMin","setMax","currentId","setCurrentId","factoryList","setFactoryList","useEffect","rebuildFactoryList","Axios","get","then","response","applyCurrentId","findFactory","console","log","newName","post","newId","delete","put","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.542a15dc.chunk.js","sourcesContent":["import React from 'react';\nimport './tree-chart.styles.scss';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TreeView from '@material-ui/lab/TreeView';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport TreeItem from '@material-ui/lab/TreeItem';\nimport Dice from '@material-ui/icons/CasinoOutlined';\nimport MainIcon from '@material-ui/icons/CenterFocusStrongOutlined';\n\nconst seedrandom = require('seedrandom');\nconst useStyles = makeStyles({\n  root: {\n    height: \"auto\",\n    flexGrow: 1,\n    margin: \"1em\",\n    color: \"white\",\n  }\n});\n\nconst iconStyles = makeStyles({\n    root: {\n      marginRight: \"5px\"\n    }\n  });\n\n/* Generate an integer between min (inclusive) and max (inclusive) */\nconst randBetween = (rng, min, max) => {\n    return Math.floor(rng() * (max - min + 1)) + min;\n}\n\n/* Generate random nums */\nconst generateNums = (factory) => {\n    /* Random number generator seed */\n    let rng = seedrandom(factory.gentime);\n\n    var nums = [];\n    for(let i = 0; i < factory.qty; i++){\n        nums.push(randBetween(rng, factory.min, factory.max));\n    }\n    return nums;\n}\n\nconst TreeChart = ({data, selectedId, selected}) => {\n  const classes = useStyles();\n  const iconClasses = iconStyles();\n  if (typeof data === 'undefined') {return (<div></div>)}\n\n  return(\n    <TreeView\n      //className={classes.root}\n      classes={{root: classes.root}}\n      defaultCollapseIcon={<ExpandMoreIcon />}\n      defaultExpandIcon={<ChevronRightIcon />}\n      selected={selected}\n    >\n        <TreeItem label={<div className=\"d-flex\"><MainIcon className={iconClasses.root} />Main</div>} nodeId=\"main\">\n            {data.map((val, key) => {\n            return (\n                <TreeItem key={key} nodeId={\"\" + val.id} label={<div className=\"d-flex\"><Dice className={iconClasses.root}/>{val.name}</div>} onClick={()=> selectedId(val.id)}>\n                    {generateNums(val).map((val, key) => {\n                        return(\n                            <TreeItem key={key} nodeId={\"\" + val.id + \"-\" + 1} label={\"\" + val}></TreeItem>\n                        );\n                    })}\n                </TreeItem>\n            );\n            })\n            }\n        </TreeItem>\n    </TreeView>\n  );\n}\n\nexport default TreeChart;","import React from 'react';\nimport './interface.styles.scss';\nimport '../form-input/form-input.styles.scss';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport DeleteIcon from '@material-ui/icons/DeleteOutlineOutlined';\nimport AddIcon from '@material-ui/icons/AddCircleOutlineRounded';\nimport RefreshIcon from '@material-ui/icons/RefreshRounded';\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n      margin: theme.spacing(1),\n    },\n}));\n\nconst Interface = ({ addFactory, deleteFactory, onRegenFactorySeed, selectedId }) => {\n  const classes = useStyles();\n\n  return(\n    <div className=\"interface-card\">\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.button}\n        startIcon={<AddIcon />}\n        onClick={addFactory}\n        size=\"small\"\n      >\n        Add\n      </Button>\n      \n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        className={classes.button}\n        disabled={selectedId == \"\" ? true : false}\n        startIcon={<DeleteIcon />}\n        onClick={deleteFactory}\n        size=\"small\"\n      >\n        Delete\n      </Button>\n\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        size=\"small\"\n        className={classes.button}\n        disabled={selectedId == \"\" ? true : false}\n        startIcon={<RefreshIcon />}\n        onClick={onRegenFactorySeed}\n        >\n        Regenerate\n      </Button>\n    </div>\n  );\n}\n\nexport default Interface;","import React, { useState } from 'react';\nimport './form-input.styles.scss';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport SaveIcon from '@material-ui/icons/Save';\nimport CheckIcon from '@material-ui/icons/CheckCircleRounded';\nimport LeftArrow from '@material-ui/icons/SubdirectoryArrowLeftOutlined';\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    margin: theme.spacing(1),\n  },\n  check: {\n    color: \"#0da8a4\"\n  },\n  arrow: {\n    color: \"#990146\",\n    fontSize: \"2.5em\"\n  }\n}));\n\nconst FormInputAdd = ({ onChangeSetName, onChangeSetQty, onChangeSetMin, onChangeSetMax, updateFactory, name, qty, min, max, selectedId }) => {\n  const classes = useStyles();\n  const [saveClicked, setSaveClicked] = useState(false);\n\n\n  if(selectedId == \"\"){\n    return (\n      <div id=\"popupedit\" className=\"popup\">\n        <div className=\"d-flex-justify-align\">\n          <p className=\"initalText\">Add a factory or select one from the tree to edit.</p>\n          <LeftArrow />\n        </div>\n      </div>\n    );\n  }\n\n  /* Validation conditions */\n  let qtyValid = qty > 0 && qty <= 15;\n  let nameValid = name.length >= 1 && name.length <= 30;\n  let minValid = min > -100000000 && min < 100000000 && min !== \"\";\n  let maxValid = min > -100000000 && max < 100000000 && min < max && max !== \"\";\n  let allValid = qtyValid && nameValid && minValid && maxValid;\n\n  return(\n      <div id=\"popupedit\" className=\"popup\">\n        <h2>Factory Settings</h2>\n        <p>To edit a factory, select it from the tree and update its settings below.</p>\n        <hr />\n        \n        <div className=\"form-input\">\n          <div className=\"label-cage\">\n            <label>Name</label>\n            {nameValid ? \"\" : <div className=\"errMsg\">invalid name</div>}\n          </div>\n          <input \n            type=\"text\" \n            maxLength=\"30\"\n            value={name}\n            className={nameValid ? \"\" : \"err\" }\n            onChange={(e) => onChangeSetName(e.target.value)}\n          />\n\n          <div className=\"label-cage\">\n            <label>Qty</label>\n            {qtyValid ? \"\" : <div className=\"errMsg\">value out of range</div>}\n          </div>\n          <input type=\"number\"\n            min=\"1\"\n            max=\"15\"\n            value={qty}\n            className={qtyValid ? \"\" : \"err\" }\n            onChange={(e) => onChangeSetQty(e.target.value)}\n          />\n\n          <div className=\"label-cage\">\n            <label>Min</label>\n            {minValid ? \"\" : <div className=\"errMsg\">value out of range</div>}\n          </div>\n          <input type=\"number\"\n            min=\"-100000000\"\n            max=\"100000000\"\n            className={minValid ? \"\" : \"err\" }\n            value={min}\n            onChange={(e) => onChangeSetMin(e.target.value)}\n          />\n\n          <div className=\"label-cage\">\n            <label>Max</label>\n            {maxValid ? \"\" : <div className=\"errMsg\">value out of range</div>}\n          </div>\n          <input type=\"number\"\n            min=\"-100000000\"\n            max=\"100000000\"\n            className={maxValid ? \"\" : \"err\" }\n            value={max}\n            onChange={(e) => onChangeSetMax(e.target.value)}\n          />\n      </div>\n      \n      <div className=\"factory-setting-buttons\">\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"small\"\n          disabled={allValid ? false : true}\n          className={classes.button}\n          startIcon={<SaveIcon />}\n          onClick={updateFactory, setSaveClicked(true)}\n        >\n          Save\n        </Button>\n        <CheckIcon className={saveClicked ? setTimeout(()=>{return classes.check}, 500) : \"hidden\" } />\n      </div>\n    </div>\n  );\n}\n\nexport default FormInputAdd;","import React, { useState, useEffect } from 'react';\nimport \"./App.css\";\nimport Axios from 'axios';\nimport TreeChart from './components/tree-Chart/tree-chart.component';\nimport Interface from './components/interface/interface.component';\nimport FormInputEdit from './components/form-input/form-input-edit.component';\nimport './app.styles.scss';\n//import { inspect } from 'util';\n//const util = require('util');\n\nfunction App() {\n\n  /* States */\n  const [name, setName] = useState(\"\");\n  const [qty, setQty] = useState(0);\n  const [min, setMin] = useState(0);\n  const [max, setMax] = useState(0);\n\n  const [currentId, setCurrentId] = useState(\"\");\n\n  /* Factory object */\n  const [factoryList, setFactoryList] = useState([]);\n\n  /* Get factories on initial load */\n  useEffect(() => {\n    rebuildFactoryList();\n  }, []);\n\n  /* Rebuild factory list */\n  const rebuildFactoryList = () => {\n    Axios.get('https://pure-forest-64023.herokuapp.com/factories').then((response) => { \n      setFactoryList(response.data);\n    });\n  }\n\n  /* Add Factory */\n  const addFactory = () => {\n    console.log(currentId);\n    const newName = \"New Factory\";\n    const newQty = 6;\n    const newMin = 0;\n    const newMax = 100;\n\n    /* Set default for new factory */\n    setName(newName);\n    setQty(newQty);\n    setMin(newMin);\n    setMax(newMax);\n\n    Axios.post('https://pure-forest-64023.herokuapp.com/create', {\n      name: newName, \n      qty: newQty, \n      min: newMin, \n      max: newMax\n    }).then((response) => { \n      const newId = response.data;\n      setCurrentId(newId);\n      rebuildFactoryList();\n    });\n  }\n\n  /* Delete factory */\n  const deleteFactory = () => {\n    Axios.delete(`https://pure-forest-64023.herokuapp.com/factories/${currentId}`);\n    setCurrentId(\"\");\n    rebuildFactoryList();\n  }\n\n  /* Update factory */\n  const updateFactory = () => {\n    let newName = name;\n    if (newName == \"\") {\n      newName = \"Nameless Factory\"\n    }\n\n    Axios.put(`https://pure-forest-64023.herokuapp.com/factories/${currentId}`, \n    {\n      name: newName, \n      qty: qty, \n      min: min, \n      max: max\n    }).then(() => { \n      rebuildFactoryList();\n    });\n  }\n\n  /* Regen seed */\n  const regenFactorySeed = () => {\n    Axios.put(`https://pure-forest-64023.herokuapp.com/factories/regen/${currentId}`, {})\n    .then(() => { \n      rebuildFactoryList();\n    });\n  }\n\n  /* Find selected factory */\n  const findFactory = (id) => {\n    for(let i = 0; i < factoryList.length; i++){\n        if(factoryList[i].id === id){\n            return factoryList[i];\n        }\n    }\n    return null;\n  }\n\n  /* Updates factory state settings to form */\n  const applyCurrentId = (id) => {\n    setCurrentId(id);\n    const factory = findFactory(id);\n    setName(factory.name);\n    setQty(factory.qty);\n    setMin(factory.min);\n    setMax(factory.max);\n  }\n\n  return (\n      <div className=\"container\">\n        <div className =\"groupContainer\">\n          <div className =\"factory-interface\">\n            <div className=\"factory-list\">\n              <TreeChart data = {factoryList} \n                selectedId = {value => {applyCurrentId(value)}} \n                selected = {\"\" + currentId}    \n              />\n            </div>\n            <Interface \n                addFactory = {addFactory}\n                deleteFactory = {deleteFactory}\n                onRegenFactorySeed = {regenFactorySeed}\n                selectedId = {currentId}\n            />\n          </div>  \n          <FormInputEdit \n            onChangeSetName = {value => setName(value)}\n            onChangeSetQty = {value => setQty(value)}\n            onChangeSetMin = {value => setMin(value)}\n            onChangeSetMax = {value => setMax(value)}\n            updateFactory = {updateFactory}\n            currentId = {currentId}\n            factoryList = {factoryList}\n            name = {name}\n            qty = {qty}\n            min = {min}\n            max = {max}\n            selectedId = {currentId}\n          />\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}