{"version":3,"sources":["components/tree-Chart/tree-chart.component.jsx","components/interface/interface.component.jsx","components/form-input/form-input-edit.component.jsx","App.js","index.js"],"names":["seedrandom","require","useStyles","makeStyles","root","height","flexGrow","maxWidth","generateNums","factory","rng","gentime","nums","i","qty","push","Math","floor","max","min","TreeChart","data","selectedId","selected","classes","TreeView","className","defaultCollapseIcon","defaultExpandIcon","map","val","key","TreeItem","nodeId","id","label","name","onClick","theme","button","margin","spacing","Interface","addFactory","deleteFactory","Button","variant","color","startIcon","size","FormInputAdd","onChangeSetName","onChangeSetQty","onChangeSetMin","onChangeSetMax","updateFactory","onRegenFactorySeed","qtyValid","type","value","onChange","e","target","App","useState","setName","setQty","setMin","setMax","currentId","setCurrentId","factoryList","setFactoryList","useEffect","rebuildFactoryList","Axios","get","then","response","applyCurrentId","length","findFactory","console","log","newName","post","newId","delete","put","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b38f72a.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TreeView from '@material-ui/lab/TreeView';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport TreeItem from '@material-ui/lab/TreeItem';\nconst seedrandom = require('seedrandom');\n\nconst useStyles = makeStyles({\n  root: {\n    height: \"auto\",\n    flexGrow: 1,\n    maxWidth: 300,\n  },\n});\n\n/* Generate random nums */\nconst generateNums = (factory) => {\n    /* Random number generator seed */\n    let rng = seedrandom(factory.gentime);\n\n    var nums = [];\n    for(let i = 0; i < factory.qty; i++){\n        nums.push(Math.floor(rng() * (factory.max - factory.min)) + factory.min);\n    }\n    return nums;\n}\n\nconst TreeChart = ({data, selectedId, selected}) => {\n  const classes = useStyles();\n  if (typeof data === 'undefined') {return (<div></div>)}\n\n  return(\n    <TreeView\n      className={classes.root}\n      defaultCollapseIcon={<ExpandMoreIcon />}\n      defaultExpandIcon={<ChevronRightIcon />}\n      selected={selected}\n    >\n    {data.map((val, key) => {\n      return (\n        <TreeItem key={key} nodeId={\"\" + val.id} label={val.name} onClick={()=> selectedId(val.id)}>\n            {generateNums(val).map((val, key) => {\n                return(\n                    <TreeItem key={key} nodeId={\"\" + val.id + \"-\" + 1} label={\"\" + val}></TreeItem>\n                );\n            })}\n        </TreeItem>\n      );\n      })\n    }\n    </TreeView>\n  );\n}\n\nexport default TreeChart;","import React from 'react';\nimport './interface.styles.scss';\nimport '../form-input/form-input.styles.scss';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddIcon from '@material-ui/icons/AddCircleOutlineRounded';\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n      margin: theme.spacing(1),\n    },\n}));\n\nconst Interface = ({ addFactory, deleteFactory }) => {\n  const classes = useStyles();\n\n  return(\n    <div className=\"interface-card\">\n\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.button}\n        startIcon={<AddIcon />}\n        onClick={addFactory}\n        size=\"small\"\n      >\n        Add\n      </Button>\n      \n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        className={classes.button}\n        startIcon={<DeleteIcon />}\n        onClick={deleteFactory}\n        size=\"small\"\n      >\n        Delete\n      </Button>\n     \n    </div>\n  );\n}\n\nexport default Interface;","import React from 'react';\nimport './form-input.styles.scss';\nimport { makeStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport RefreshIcon from '@material-ui/icons/RefreshRounded';\nimport SaveIcon from '@material-ui/icons/Save';\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    margin: theme.spacing(1),\n  },\n}));\n\n\nconst FormInputAdd = ({ onChangeSetName, onChangeSetQty, onChangeSetMin, onChangeSetMax, updateFactory, name, qty, min, max, onRegenFactorySeed, selectedId }) => {\n  const classes = useStyles();\n  if(selectedId == \"\"){\n    return (\n      <div id=\"popupedit\" className=\"popup\">\n      <p>To edit a factory, select it from the tree.</p>\n      </div>\n    );\n  }\n\n  let qtyValid = qty > 0 && qty <= 15;\n\n  return(\n      <div id=\"popupedit\" className=\"popup\">\n        <h2>Factory Settings</h2>\n        <p>To edit a factory, select it from the tree and update its settings below.</p>\n        \n        <div className=\"form-input\">\n            <label>Name:</label>\n            <input \n            type=\"text\" \n            value={name}\n            onChange={(e) => onChangeSetName(e.target.value)}\n            />\n            <label>{qtyValid ? \"Qty:\" : \"QtyX:\" }</label>\n            <input type=\"number\"\n            min=\"1\"\n            max=\"15\"\n            value={qty}\n            onChange={(e) => onChangeSetQty(e.target.value)}\n            />\n            <label>Min:</label>\n            <input type=\"number\"\n            min=\"-100000000\"\n            max=\"100000000\"\n            value={min}\n            onChange={(e) => onChangeSetMin(e.target.value)}\n            />\n            <label>Max:</label>\n            <input type=\"number\"\n              min=\"-100000000\"\n              max=\"100000000\"\n            value={max}\n            onChange={(e) => onChangeSetMax(e.target.value)}\n            />\n        </div>\n        <div className=\"factory-setting-buttons\">\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"small\"\n            className={classes.button}\n            startIcon={<SaveIcon />}\n            onClick={updateFactory}\n          >\n            Save\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"small\"\n            className={classes.button}\n            startIcon={<RefreshIcon />}\n            onClick={onRegenFactorySeed}\n          >\n            Regenerate\n          </Button>\n        </div>\n      </div>\n  );\n}\n\nexport default FormInputAdd;","import React, { useState, useEffect } from 'react';\nimport \"./App.css\";\nimport Axios from 'axios';\nimport TreeChart from './components/tree-Chart/tree-chart.component';\nimport Interface from './components/interface/interface.component';\nimport FormInputEdit from './components/form-input/form-input-edit.component';\nimport './app.styles.scss';\n//import { inspect } from 'util';\n//const util = require('util');\n\nfunction App() {\n\n  /* States */\n  const [name, setName] = useState(\"\");\n  const [qty, setQty] = useState(0);\n  const [min, setMin] = useState(0);\n  const [max, setMax] = useState(0);\n\n  const [currentId, setCurrentId] = useState(\"\");\n\n  /* Factory object */\n  const [factoryList, setFactoryList] = useState([]);\n\n  /* Get factories on initial load */\n  useEffect(() => {\n    rebuildFactoryList();\n  }, []);\n\n  /* Rebuild factory list */\n  const rebuildFactoryList = () => {\n    Axios.get('https://pure-forest-64023.herokuapp.com/factories').then((response) => { \n      setFactoryList(response.data);\n    });\n  }\n\n  /* Add Factory */\n  const addFactory = () => {\n    console.log(currentId);\n    const newName = \"New Factory\";\n    const newQty = 6;\n    const newMin = 0;\n    const newMax = 100;\n\n    /* Set default for new factory */\n    setName(newName);\n    setQty(newQty);\n    setMin(newMin);\n    setMax(newMax);\n\n    Axios.post('https://pure-forest-64023.herokuapp.com/create', {\n      name: newName, \n      qty: newQty, \n      min: newMin, \n      max: newMax\n    }).then((response) => { \n      const newId = response.data;\n      setCurrentId(newId);\n      rebuildFactoryList();\n    });\n  }\n\n  /* Delete factory */\n  const deleteFactory = () => {\n    Axios.delete(`https://pure-forest-64023.herokuapp.com/factories/${currentId}`);\n    setCurrentId(\"\");\n    rebuildFactoryList();\n  }\n\n  /* Update factory */\n  const updateFactory = () => {\n    let newName = name;\n    if (newName == \"\") {\n      newName = \"Nameless Factory\"\n    }\n\n    Axios.put(`https://pure-forest-64023.herokuapp.com/factories/${currentId}`, \n    {\n      name: newName, \n      qty: qty, \n      min: min, \n      max: max\n    }).then(() => { \n      rebuildFactoryList();\n    });\n  }\n\n  /* Regen seed */\n  const regenFactorySeed = () => {\n    Axios.put(`https://pure-forest-64023.herokuapp.com/factories/regen/${currentId}`, {})\n    .then(() => { \n      rebuildFactoryList();\n    });\n  }\n\n  /* Find selected factory */\n  const findFactory = (id) => {\n    for(let i = 0; i < factoryList.length; i++){\n        if(factoryList[i].id === id){\n            return factoryList[i];\n        }\n    }\n    return null;\n  }\n\n  /* Updates factory state settings to form */\n  const applyCurrentId = (id) => {\n    setCurrentId(id);\n    const factory = findFactory(id);\n    setName(factory.name);\n    setQty(factory.qty);\n    setMin(factory.min);\n    setMax(factory.max);\n  }\n\n  return (\n      <div className=\"container\">\n        <div className =\"factory-interface\">\n          <div className=\"factory-list\">\n            <TreeChart data = {factoryList} \n              selectedId = {value => {applyCurrentId(value)}} \n              selected = {\"\" + currentId}    \n            />\n          </div>\n          <Interface \n              addFactory = {addFactory}\n              deleteFactory = {deleteFactory}\n          />\n        </div>  \n        <FormInputEdit \n          onChangeSetName = {value => setName(value)}\n          onChangeSetQty = {value => setQty(value)}\n          onChangeSetMin = {value => setMin(value)}\n          onChangeSetMax = {value => setMax(value)}\n          updateFactory = {updateFactory}\n          onRegenFactorySeed = {regenFactorySeed}\n          currentId = {currentId}\n          factoryList = {factoryList}\n          name = {name}\n          qty = {qty}\n          min = {min}\n          max = {max}\n          selectedId = {currentId}\n        />\n      </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}